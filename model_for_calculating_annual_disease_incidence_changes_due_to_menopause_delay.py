# -*- coding: utf-8 -*-
"""Model for Calculating Annual Disease Incidence Changes Due to Menopause Delay.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11_x_zAe6f82v84MaPT4sXc2tgF0EvRmU
"""

!pip install numpy pandas matplotlib

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from typing import Dict, List

"""###Model Class"""

class MenopauseDelayModel:
    def __init__(self):
        # Baseline disease incidence rates per 100 thousand women per year (averaged data for the US/UK)
        self.base_rates = {
            'CVD': 1200,
            'Osteoporosis': 800,
            'Dementia': 500,
            'Breast Cancer': 100,
            'Endometrial Cancer': 30,
            'Ovarian Cancer': 20
        }

        # Relative risks and benefits from MHT (based on literature data)
        self.effects = {
            'CVD': 0.3,      # 30% risk reduction
            'Osteoporosis': 0.3, # 30% risk reduction
            'Dementia': 0.2,   # 20% risk reduction
            'Breast Cancer': 1.25,     # 25% risk increase
            'Endometrial Cancer': 2.25, # 2.25-fold risk increase
            'Ovarian Cancer': 1.15 # 15% risk increase
        }

    def calculate_benefit(self, disease: str) -> float:
        """Calculate the reduction in incidence of a favorable outcome"""
        return self.base_rates[disease] * self.effects[disease]


    def calculate_risk(self, disease: str) -> float:
        """Calculate the increase in incidence of an adverse outcome"""
        return self.base_rates[disease] * (self.effects[disease] - 1)


    def calculate_net_effect(self, delay_years: int = 5) -> Dict[str, float]:
        """
        Calculate the net effect for a specified delay period

        Args:
            delay_years: menopause delay period in years

        Returns:
            Dictionary with results for each disease
        """
        k = delay_years / 5  # time coefficient

        results = {}
        total_benefit = 0
        total_risk = 0

        for disease in self.base_rates.keys():
            if disease in ['CVD', 'Osteoporosis', 'Dementia']:
                benefit = self.calculate_benefit(disease) * k
                results[disease] = benefit
                total_benefit += benefit
            else:
                risk = self.calculate_risk(disease) * k
                results[disease] = -risk  # negative effect
                total_risk += risk

        results['Net Effect'] = total_benefit - total_risk
        return results

    def simulate_over_time(self, max_years: int = 10) -> pd.DataFrame:
        """
        Model the effect dynamics over time

        Args:
            max_years: maximum delay period
        Returns:
            DataFrame with annual changes
        """
        years = list(range(1, max_years + 1))
        data = {disease: [] for disease in self.base_rates.keys()}
        data['Net Effect'] = []

        for year in years:
            results = self.calculate_net_effect(year)
            for disease, value in results.items():
                data[disease].append(value)

        return pd.DataFrame(data, index=years)

"""###Using the Model"""

# Create a model instance
model = MenopauseDelayModel()

# Calculate for a 5-year delay
results_5y = model.calculate_net_effect(5)
print("Results for a 5-year delay:")
for disease, effect in results_5y.items():
    print(f"{disease}: {effect:.1f} cases/100K/year")

# Model dynamics over 10 years
df = model.simulate_over_time(10)
print("\nEffect dynamics by year:")
print(df.round(1))

"""###Visualizing Results"""

# Plotting
plt.figure(figsize=(12, 8))

# Individual diseases
for disease in df.columns[:-1]:  # exclude 'Net Effect'
    plt.plot(df.index, df[disease], label=disease)

# Net effect
plt.plot(df.index, df['Net Effect'], label='Net Effect', linewidth=3)

plt.xlabel('Years of Menopause Delay')
plt.ylabel('Change in cases/100K/year')
plt.title('Dynamics of Benefits and Risks with Menopause Delay')
plt.legend()
plt.grid(True)
plt.show()